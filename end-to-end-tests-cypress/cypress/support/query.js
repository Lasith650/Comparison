/*
 * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.com). All Rights Reserved.
 *
 * This software is the property of WSO2 Inc. and its suppliers, if any.
 * Dissemination of any information or reproduction of any material contained
 * herein is strictly forbidden, unless permitted by WSO2 in accordance with
 * the WSO2 Commercial License available at http://wso2.com/licenses.
 * For specific language governing the permissions and limitations under
 * this license, please see the license as well as any agreement youâ€™ve
 * entered into with WSO2 governing the purchase of this software and any
 * associated services.
 */

export const LIST_ENVIRONMENTS_QUERY =
    'query ($org: OrgFilter!) {  listEnvironments(org: $org) {    id    name    __typename  }}';

export const LIST_TENANTS_QUERY =
    'query ($tenantDataFilter: TenantDataFilter!) {  listTenants(tenantDataFilter: $tenantDataFilter)}';

export const LIST_APIS_QUERY =
    'query ($dataFilter: DataFilter!) {  listAllAPI(dataFilter: $dataFilter) {    id    name    version    provider    __typename  }}';

export const LIST_APPLICATIONS_QUERY =
    'query ($dataFilter: DataFilter!, $applicationFilter: ApplicationFilter!) {  listApplications(applicationFilter: $applicationFilter, dataFilter: $dataFilter) {    id    name    owner    __typename  }}';

export const OVERVIEW_PAGE_QUERY =
    'query ($dataFilter: DataFilter!, $timeFilter: TimeFilter!, $latencySummaryFilter: LatencySummaryFilter!, $granularity: String!) {  getTotalTraffic(filter: $timeFilter, dataFilter: $dataFilter)  getOverallLatency(filter: $timeFilter, dataFilter: $dataFilter)  getTotalErrors(filter: $timeFilter, dataFilter: $dataFilter)  getLatencySummary(    filter: $timeFilter    latencySummaryFilter: $latencySummaryFilter    dataFilter: $dataFilter  ) {    summary {      timeSpan      latencyTime      __typename    }    granularity    __typename  }  getSuccessSummary(    filter: $timeFilter    dataFilter: $dataFilter    granularity: $granularity  ) {    summary {      timeSpan      requestCount      __typename    }    granularity    __typename  }  getErrorSummary(    filter: $timeFilter    dataFilter: $dataFilter    granularity: $granularity  ) {    summary {      timeSpan      errorCount      __typename    }    granularity    __typename  }}';

export const TRAFFIC_PAGE_QUERY =
    'query ($dataFilter: DataFilter!, $timeFilter: TimeFilter!, $apiUsageOvertimeFilter: APIUsageOverTimeFilter!, $apiUsageByBackendOverTimeFilter: APIUsageByBackendOverTimeFilter!, $resourceUsageFilter: ResourceUsageFilter!) {  getAPIUsageOverTime(    timeFilter: $timeFilter    apiUsageOvertimeFilter: $apiUsageOvertimeFilter    dataFilter: $dataFilter  ) {    apiId    usage {      timeSpan      count      __typename    }    granularity    __typename  }  getAPIUsageByAppOverTime(    timeFilter: $timeFilter    apiUsageOvertimeFilter: $apiUsageOvertimeFilter    dataFilter: $dataFilter  ) {    usage {      applicationId      applicationName      applicationOwner      usage {        timeSpan        count        __typename      }      __typename    }    granularity    __typename  }  getAPIUsageByBackendOverTime(    timeFilter: $timeFilter    apiUsageByBackendOverTimeFilter: $apiUsageByBackendOverTimeFilter    dataFilter: $dataFilter  ) {    usage {      backend      usage {        timeSpan        count        __typename      }      __typename    }    granularity    __typename  }  getResourceUsage(    timeFilter: $timeFilter    resourceUsageFilter: $resourceUsageFilter    dataFilter: $dataFilter  ) {    usage {      apiId      apiResourceTemplate      apiMethod      count      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }}';

export const ERRORS_BY_CATEGORY_PAGE_QUERY =
    'query ($timeFilter: TimeFilter!, $errorsByCategoryFilter: ErrorsByCategoryFilter!, $dataFilter: DataFilter!, $errorsDetailsFilter: ErrorsDetailsFilter) {  getErrorsByCategory(    timeFilter: $timeFilter    errorsByCategoryFilter: $errorsByCategoryFilter    dataFilter: $dataFilter  ) {    errors {      timeSpan      auth      targetConnectivity      throttled      other      __typename    }    granularity    __typename  }  getErrorsDetails(    timeFilter: $timeFilter    errorsDetailsFilter: $errorsDetailsFilter    dataFilter: $dataFilter  ) {    usage {      apiId      timeSpan      applicationId      applicationName      applicationOwner      reason      count      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }}';

export const ERRORS_BY_STATUS_CODE_PAGE_QUERY =
    'query ($timeFilter: TimeFilter!, $errorsByStatusCodeFilter: ErrorsByStatusCodeFilter!, $dataFilter: DataFilter!, $errorCountByStatusCodeFilterProxy: ErrorCountByStatusCodeFilter!, $errorCountByStatusCodeFilterTarget: ErrorCountByStatusCodeFilter!) {  getProxyTargetErrorsOverTime(    timeFilter: $timeFilter    errorsByStatusCodeFilter: $errorsByStatusCodeFilter    dataFilter: $dataFilter  ) {    timeSpan    proxy {      _4xx      _5xx      total      __typename    }    target {      _4xx      _5xx      total      __typename    }    __typename  }  getErrorsByStatusCodeProxy: getErrorsByStatusCode(    timeFilter: $timeFilter    errorCountByStatusCodeFilter: $errorCountByStatusCodeFilterProxy    dataFilter: $dataFilter  ) {    errors {      apiId      errorCountByCode {        statusCode        count        __typename      }      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }  getErrorsByStatusCodeTarget: getErrorsByStatusCode(    timeFilter: $timeFilter    errorCountByStatusCodeFilter: $errorCountByStatusCodeFilterTarget    dataFilter: $dataFilter  ) {    errors {      apiId      errorCountByCode {        statusCode        count        __typename      }      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }}';

export const LATENCY_PAGE_QUERY =
    'query ($dataFilter: DataFilter!, $timeFilter: TimeFilter!, $latencyFilter: LatencyFilter!, $limit: Int!) {  topSlowestAPIs(    filter: $timeFilter,    dataFilter: $dataFilter,    limit: $limit) {    apiId    latency    }  getLatency(    timeFilter: $timeFilter    latencyFilter: $latencyFilter    dataFilter: $dataFilter  ) {    summary {      timeSpan      response      backend      requestMediation      responseMediation      responseMedian      backendMedian      requestMediationMedian      responseMediationMedian      __typename    }    granularity    __typename  }}';

export const CACHE_PAGE_QUERY =
    'query ($dataFilter: DataFilter!, $timeFilter: TimeFilter!, $cacheFilter: CacheFilter!, $latencySummaryFilter: LatencySummaryFilter!) {  getLatencySummary(    filter: $timeFilter    latencySummaryFilter: $latencySummaryFilter    dataFilter: $dataFilter  ) {    summary {      timeSpan      latencyTime      __typename    }    granularity    __typename  }  getCacheHitsAndMisses(    timeFilter: $timeFilter    cacheFilter: $cacheFilter    dataFilter: $dataFilter  ) {    summary {      timeSpan      hits      misses      hitPercentage      __typename    }    granularity    __typename  }}';

export const DEVICES_PAGE_QUERY =
    'query ($dataFilter: DataFilter!, $timeFilter: TimeFilter!, $deviceFilter: DeviceFilter!) {  getTopPlatforms(    timeFilter: $timeFilter    deviceFilter: $deviceFilter    dataFilter: $dataFilter  ) {    platform    count    __typename  }  getTopUserAgents(    timeFilter: $timeFilter    deviceFilter: $deviceFilter    dataFilter: $dataFilter  ) {    userAgent    count    __typename  }}';

export const ALERTS_PAGE_QUERY =
    'query ($dataFilter: DataFilter!, $timeFilter: TimeFilter!, $alertSummaryFilter: AlertSummaryFilter!, $topAPIsByAlertCountFilter: TopAPIsByAlertCountFilter!) {  getAlertSummary(    timeFilter: $timeFilter    alertSummaryFilter: $alertSummaryFilter    dataFilter: $dataFilter  ) {    usage {      apiId      timestamp      category      metric      severity      message      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }   getTopAPIsByAlertCount(    timeFilter: $timeFilter    topAPIsByAlertCountFilter: $topAPIsByAlertCountFilter    dataFilter: $dataFilter  ) {    usage {      apiId      count      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }}';

export const ALL_PAGES_QUERY =
    'query ($org: OrgFilter!, $tenantDataFilter: TenantDataFilter!,$dataFilter: DataFilter!, $applicationFilter: ApplicationFilter!, $timeFilter: TimeFilter!, $granularity: String!, $apiUsageOvertimeFilter: APIUsageOverTimeFilter!, $apiUsageByBackendOverTimeFilter: APIUsageByBackendOverTimeFilter!, $resourceUsageFilter: ResourceUsageFilter!, $errorsByCategoryFilter: ErrorsByCategoryFilter!, $errorsDetailsFilter: ErrorsDetailsFilter,$errorsByStatusCodeFilter: ErrorsByStatusCodeFilter!, $errorCountByStatusCodeFilterProxy: ErrorCountByStatusCodeFilter!, $errorCountByStatusCodeFilterTarget: ErrorCountByStatusCodeFilter!, $latencySummaryFilter: LatencySummaryFilter!, $latencyFilter: LatencyFilter!, $limit: Int!, $cacheFilter: CacheFilter!, $deviceFilter: DeviceFilter!, $alertSummaryFilter: AlertSummaryFilter!, $topAPIsByAlertCountFilter: TopAPIsByAlertCountFilter!) {  listEnvironments(org: $org) {    id    name    __typename  } listTenants(tenantDataFilter: $tenantDataFilter) listAllAPI(dataFilter: $dataFilter) { id    name    version    provider    __typename } listApplications(applicationFilter: $applicationFilter, dataFilter: $dataFilter) { id    name    owner    __typename } getTotalTraffic(filter: $timeFilter, dataFilter: $dataFilter)  getOverallLatency(filter: $timeFilter, dataFilter: $dataFilter)  getTotalErrors(filter: $timeFilter, dataFilter: $dataFilter) getSuccessSummary(filter: $timeFilter    dataFilter: $dataFilter    granularity: $granularity) { summary { timeSpan      requestCount      __typename } granularity    __typename } getErrorSummary(filter: $timeFilter    dataFilter: $dataFilter    granularity: $granularity) { summary { timeSpan      errorCount      __typename } granularity    __typename }getAPIUsageOverTime(timeFilter: $timeFilter    apiUsageOvertimeFilter: $apiUsageOvertimeFilter    dataFilter: $dataFilter) { apiId      usage { timeSpan      count      __typename } granularity    __typename } getAPIUsageByAppOverTime(timeFilter: $timeFilter    apiUsageOvertimeFilter: $apiUsageOvertimeFilter    dataFilter: $dataFilter) { usage { applicationId      applicationName      applicationOwner      usage { timeSpan        count        __typename } __typename } granularity    __typename } getAPIUsageByBackendOverTime(timeFilter: $timeFilter    apiUsageByBackendOverTimeFilter: $apiUsageByBackendOverTimeFilter    dataFilter: $dataFilter) { usage { backend      usage { timeSpan        count        __typename } __typename } granularity    __typename } getResourceUsage(timeFilter: $timeFilter    resourceUsageFilter: $resourceUsageFilter    dataFilter: $dataFilter) { usage { apiId      apiResourceTemplate      apiMethod      count      __typename } pagination { total      limit      offset      sortBy      sortOrder      __typename } __typename } getErrorsByCategory(timeFilter: $timeFilter    errorsByCategoryFilter: $errorsByCategoryFilter    dataFilter: $dataFilter) { errors { timeSpan      auth      targetConnectivity      throttled      other      __typename } granularity    __typename } getErrorsDetails(timeFilter: $timeFilter    errorsDetailsFilter: $errorsDetailsFilter    dataFilter: $dataFilter) { usage { apiId      timeSpan      applicationId      applicationName      applicationOwner      reason      count      __typename } pagination { total      limit      offset      sortBy      sortOrder      __typename } __typename } getProxyTargetErrorsOverTime(timeFilter: $timeFilter    errorsByStatusCodeFilter: $errorsByStatusCodeFilter    dataFilter: $dataFilter) { timeSpan    proxy { _4xx      _5xx      total      __typename } target { _4xx      _5xx      total      __typename } __typename } getErrorsByStatusCodeProxy: getErrorsByStatusCode(timeFilter: $timeFilter    errorCountByStatusCodeFilter: $errorCountByStatusCodeFilterProxy    dataFilter: $dataFilter) { errors { apiId      errorCountByCode { statusCode        count        __typename } __typename } pagination { total      limit      offset      sortBy      sortOrder      __typename } __typename } getErrorsByStatusCodeTarget: getErrorsByStatusCode(timeFilter: $timeFilter    errorCountByStatusCodeFilter: $errorCountByStatusCodeFilterTarget    dataFilter: $dataFilter) { errors { apiId      errorCountByCode { statusCode        count        __typename } __typename } pagination { total      limit      offset      sortBy      sortOrder      __typename } __typename } topSlowestAPIs(filter: $timeFilter, dataFilter: $dataFilter, limit: $limit) { apiId    latency } getLatency(timeFilter: $timeFilter    latencyFilter: $latencyFilter    dataFilter: $dataFilter) { summary { timeSpan      response      backend      requestMediation      responseMediation      responseMedian      backendMedian      requestMediationMedian      responseMediationMedian      __typename } granularity    __typename } getLatencySummary(filter: $timeFilter    latencySummaryFilter: $latencySummaryFilter    dataFilter: $dataFilter) { summary { timeSpan      latencyTime      __typename } granularity    __typename } getCacheHitsAndMisses(timeFilter: $timeFilter    cacheFilter: $cacheFilter    dataFilter: $dataFilter) { summary { timeSpan      hits      misses      hitPercentage      __typename } granularity    __typename } getTopPlatforms(timeFilter: $timeFilter    deviceFilter: $deviceFilter    dataFilter: $dataFilter) { platform    count    __typename } getTopUserAgents(timeFilter: $timeFilter    deviceFilter: $deviceFilter    dataFilter: $dataFilter) { userAgent    count    __typename } getCacheHitsAndMisses(timeFilter: $timeFilter    cacheFilter: $cacheFilter    dataFilter: $dataFilter) { summary { timeSpan      hits      misses      hitPercentage      __typename } granularity    __typename } getTopPlatforms(timeFilter: $timeFilter    deviceFilter: $deviceFilter    dataFilter: $dataFilter) { platform    count    __typename } getTopUserAgents(timeFilter: $timeFilter    deviceFilter: $deviceFilter    dataFilter: $dataFilter) { userAgent    count    __typename }  getAlertSummary(    timeFilter: $timeFilter    alertSummaryFilter: $alertSummaryFilter    dataFilter: $dataFilter  ) {    usage {      apiId      timestamp      category      metric      severity      message      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }   getTopAPIsByAlertCount(    timeFilter: $timeFilter    topAPIsByAlertCountFilter: $topAPIsByAlertCountFilter    dataFilter: $dataFilter  ) {    usage {      apiId      count      __typename    }    pagination {      total      limit      offset      sortBy      sortOrder      __typename    }    __typename  }}';
