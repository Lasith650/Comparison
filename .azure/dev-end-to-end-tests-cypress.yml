# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - dev

pool:
  vmImage: ubuntu-latest

variables:
  - group: dev-end-to-end-tests

steps:
  - script: |
      echo "Script executed from: ${PWD}"
      cd ..
      echo "Script executed from: ${PWD}"
      cd end-to-end-tests-cypress
      npm install
    displayName: 'npm install script'

  - script: |
      echo "Script executed from: ${PWD}"
      cd ..
      echo "Script executed from: ${PWD}"
      cd end-to-end-tests-cypress
      jq '.portalUrl = $PORTAL_URL | .analyticsQueryApiUrl = $QUERY_API_URL | .analyticsAlertsApiUrl = $ALERTS_API_URL
        | .analyticsQueryApiToken = $QUERY_API_TOKEN | .organizationId = $ORGANIZATION_ID | .environmentId = $ENVIRONMENT_ID
        | .tenant = $TENANT | .testURL = $TEST_URL | .idpURL = $IDP_ENDPOINT | .idpUsername = $IDP_USERNAME
        | .idpPassword = $IDP_PASSWORD | .idpAuthHeader = $IDP_AUTH_HEADER | .apimServerUrl = $APIM_SERVER_URL
        | .name = $USERNAME | .email = $EMAIL | .picURL = $PIC_URL | .orgs[0].uuid = $ORGANIZATION_UUID
        | .orgs[0].name = $ORGANIZATION_NAME | .orgs[0].handle = $ORGANIZATION_HANDLE
        | .selectedOrgHandle = $SELECTED_ORGANIZATION_HANDLE' \
        --arg PORTAL_URL "$(PORTAL_URL)" \
        --arg QUERY_API_URL "$(QUERY_API_URL)" \
        --arg ALERTS_API_URL "$(ALERTS_API_URL)" \
        --arg QUERY_API_TOKEN "$(QUERY_API_TOKEN)" \
        --arg ORGANIZATION_ID "$(ORGANIZATION_ID)" \
        --arg ENVIRONMENT_ID "$(ENVIRONMENT_ID)" \
        --arg TENANT "$(TENANT)" \
        --arg TEST_URL "$(TEST_URL)" \
        --arg IDP_ENDPOINT "$(IDP_ENDPOINT)" \
        --arg IDP_USERNAME "$(IDP_USERNAME)" \
        --arg IDP_PASSWORD "$(IDP_PASSWORD)" \
        --arg IDP_AUTH_HEADER "$(IDP_AUTH_HEADER)" \
        --arg APIM_SERVER_URL "$(APIM_SERVER_URL)" \
        --arg USERNAME "$(USERNAME)" \
        --arg EMAIL "$(EMAIL)" \
        --arg PIC_URL "$(PIC_URL)" \
        --arg ORGANIZATION_UUID "$(ORGANIZATION_UUID)" \
        --arg ORGANIZATION_NAME "$(ORGANIZATION_NAME)" \
        --arg ORGANIZATION_HANDLE "$(ORGANIZATION_HANDLE)" \
        --arg SELECTED_ORGANIZATION_HANDLE "$(SELECTED_ORGANIZATION_HANDLE)" \
        cypress.env.json > tmp.$$.json && mv tmp.$$.json cypress.env.json
    displayName: 'Configuring cypress.env.json script'

  - script: |
      cd ..
      cd end-to-end-tests-cypress/cypress/resources/publisher/gateway
      sed -i -e '/config_endpoint =/ s,= .*,= "'"$(auth_endpoint)"'",' deployment.toml
      sed -i -e '/auth_token =/ s/= .*/= "'"$(auth_token)"'"/' deployment.toml
    displayName: 'Configuring deployment.toml'

  - script: |
      cd ..
      cd end-to-end-tests-cypress
      npm run test
    displayName: 'Cypress test run script'
